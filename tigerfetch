#!/usr/bin/env python3

import psutil
import platform
import subprocess
import getpass

def get_cpu_info():
    freq_mhz = psutil.cpu_freq().max
    logical_cores = psutil.cpu_count(logical=True)

    if freq_mhz:
        freq_ghz = freq_mhz / 1000
        return f"{freq_ghz:.2f} GHz ({logical_cores} cores)"
    return f"N/A ({logical_cores} cores)"

def get_memory():
    mem = psutil.virtual_memory()
    total = mem.total // (1024 ** 2)
    used = mem.used // (1024 ** 2)
    return f"{used}MiB / {total}MiB"

def get_gpu_info():
    try:
        
        lspci_output = subprocess.check_output(["lspci"], text=True)
        gpu_line = next((line for line in lspci_output.splitlines() if "VGA" in line), None)
        
        if not gpu_line:
            return "GPU nÃ£o encontrada"

        gpu_name = gpu_line.split(":", 2)[-1].strip()
       
        card_id = gpu_line.split()[0]

        return gpu_name

    except subprocess.CalledProcessError as e:
        return "Erro ao executar comandos", str(e)



def tigerfetch():
    cpu = get_cpu_info()
    gpu = get_gpu_info()
    memory = get_memory()
    kernel = platform.release()
    user = getpass.getuser()
    
    subprocess.run('figlet "TigerOS"', shell=True)
    print(f"    ðŸ™‚ USER    {user}")
    print(f"    CPU     {cpu}")
    print(f"    GPU:    {gpu}")
    print(f"    MEM     {memory}")
    print(f"    KERNEL  {kernel}")
    

if __name__ == "__main__":
    tigerfetch()